(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{101:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),o=(a(0),a(117)),c={id:"add-language-support",title:"Add Language Support"},i={unversionedId:"add-language-support",id:"add-language-support",isDocsHomePage:!1,title:"Add Language Support",description:"A good place to start looking at is here//github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/TesterFactory.ts",source:"@site/docs/addLanguageSupport.mdx",slug:"/add-language-support",permalink:"/cpbooster/docs/add-language-support",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/addLanguageSupport.mdx",version:"current",sidebar:"docs",previous:{title:"Add Editor Support",permalink:"/cpbooster/docs/add-editor-support"},next:{title:"Add Online Judge Support",permalink:"/cpbooster/docs/add-online-judge-support"}},l=[{value:"Interpreted",id:"interpreted",children:[]},{value:"Compiled",id:"compiled",children:[]},{value:"Mixed",id:"mixed",children:[]}],s={toc:l};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A good place to start looking at is here: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/TesterFactory.ts"},"https://github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/TesterFactory.ts")),Object(o.b)("p",null,"where you will find that we have three main clases that represent ",Object(o.b)("inlineCode",{parentName:"p"},"compiled"),", ",Object(o.b)("inlineCode",{parentName:"p"},"interpreted")," and ",Object(o.b)("inlineCode",{parentName:"p"},"mixed")," languages."),Object(o.b)("h3",{id:"interpreted"},"Interpreted"),Object(o.b)("p",null,"Usually, all interpreted languages have the same syntax to run a file:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"interpreter filename.[extension]\n")),Object(o.b)("p",null,"e.g."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ python filename.py\n$ ruby filename.rb\n$ node filname.js\n...\n")),Object(o.b)("p",null,"therefore, ",Object(o.b)("inlineCode",{parentName:"p"},"cpbooster")," should support absolutely all ",Object(o.b)("inlineCode",{parentName:"p"},"interpreted")," languages."),Object(o.b)("p",null,"The issue comes when we use either ",Object(o.b)("inlineCode",{parentName:"p"},"compiled")," or ",Object(o.b)("inlineCode",{parentName:"p"},"interpreted")," languages, specifically\nwhen it comes to indicate the name for the executable (binary) file."),Object(o.b)("h3",{id:"compiled"},"Compiled"),Object(o.b)("p",null,"Compilers like ",Object(o.b)("inlineCode",{parentName:"p"},"gcc"),", ",Object(o.b)("inlineCode",{parentName:"p"},"clang"),", ",Object(o.b)("inlineCode",{parentName:"p"},"rustc"),", ",Object(o.b)("inlineCode",{parentName:"p"},"go"),", ... use the ",Object(o.b)("inlineCode",{parentName:"p"},"-o")," argument to indicate\nthe name for the executable file."),Object(o.b)("p",null,"e.g."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"gcc filename.cpp -o myexecutable.exe\ngo build filename.go -o myexecutable.exe\nrustc filename.rs -o myexecutable.exe\n...\n")),Object(o.b)("p",null,"However, there might exist some other compilers that do not follow this convention and they\nprobably use a different argument, to solve this we have the following function"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'static getFileNameOptionForCompilerCommand(compilerCommand: string): string {\n  return CompiledTester.fileNameOptionForCommand.get(compilerCommand) ?? "-o";\n}\n')),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/CompiledTester.ts#L111-L113"},"https://github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/CompiledTester.ts#L111-L113")),Object(o.b)("p",null,"which uses a ",Object(o.b)("inlineCode",{parentName:"p"},"Map")," (hash table)\nto retrieve the correct argument name depending on the compiler command (",Object(o.b)("inlineCode",{parentName:"p"},"gcc"),", ",Object(o.b)("inlineCode",{parentName:"p"},"g++"),", ",Object(o.b)("inlineCode",{parentName:"p"},"csc"),", ",Object(o.b)("inlineCode",{parentName:"p"},"go"),", ...),\nif the compiler does not exist in the hash table (",Object(o.b)("inlineCode",{parentName:"p"},"Map"),") it defaults to the ",Object(o.b)("inlineCode",{parentName:"p"},"-o")," argument name."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'private static fileNameOptionForCommand: Map<string, string> = new Map([\n  [NonStandardCompilers.mcs, "-out:"], // csharp compiler\n  [NonStandardCompilers.csc, "/out:"] // csharp compiler\n]);\n')),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/CompiledTester.ts#L37-L40"},"https://github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/CompiledTester.ts#L37-L40")),Object(o.b)("p",null,"notice that in the hash table (",Object(o.b)("inlineCode",{parentName:"p"},"Map"),") we just have ",Object(o.b)("inlineCode",{parentName:"p"},"msc")," and ",Object(o.b)("inlineCode",{parentName:"p"},"csc")," which are ",Object(o.b)("inlineCode",{parentName:"p"},"C#")," compilers, this is because\nall the tested languages except for ",Object(o.b)("inlineCode",{parentName:"p"},"C#")," use the ",Object(o.b)("inlineCode",{parentName:"p"},"-o")," argument therefore there is no need to insert them into the hash table."),Object(o.b)("p",null,"Now let's actually talk about ",Object(o.b)("inlineCode",{parentName:"p"},"C#")," compilers and how they conflict with the standard format. It turns out that these compilers\nnot just use a different argument name to sepecify the executable name, but they also force us to write the name of the executable\ntogether with the argument name (i.e. not separated by a space)"),Object(o.b)("p",null,"e.g."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"mcs -out:myexecutable.exe filename.cs\ncsc /out:myexecutable.exe filename.cs\n")),Object(o.b)("p",null,"to solve this when we compile we have an special condition, which basically checks if the compiler is NOT standard (i.e. ",Object(o.b)("inlineCode",{parentName:"p"},"csc")," and ",Object(o.b)("inlineCode",{parentName:"p"},"mcs"),")\nthen join/concatenate the argument name with the executable name."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"if (Object.keys(NonStandardCompilers).includes(compilerCommand)) {\n  args.push(\n    CompiledTester.getFileNameOptionForCompilerCommand(compilerCommand) +\n      this.getDefaultExecutableFileName(debug)\n  );\n} else {\n  args.push(\n    CompiledTester.getFileNameOptionForCompilerCommand(compilerCommand),\n    this.getDefaultExecutableFileName(debug)\n  );\n}\n")),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/CompiledTester.ts#L144-L154"},"https://github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/CompiledTester.ts#L144-L154")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'export enum NonStandardCompilers {\n  mcs = "mcs",\n  csc = "csc",\n}\n')),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/CompiledTester.ts#L31-L34"},"https://github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/CompiledTester.ts#L31-L34")),Object(o.b)("h3",{id:"mixed"},"Mixed"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"mixed")," languages are the ones that are compiled with one command but executed with another one (not counting ",Object(o.b)("inlineCode",{parentName:"p"},"./executable.exe")," format as command)\ne.g. programs written in ",Object(o.b)("inlineCode",{parentName:"p"},"Java")," are compiled using the ",Object(o.b)("inlineCode",{parentName:"p"},"javac")," command and then executed using the ",Object(o.b)("inlineCode",{parentName:"p"},"java")," command, something similar\nhappens with languages like ",Object(o.b)("inlineCode",{parentName:"p"},"Kotlin")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Scala"),"."),Object(o.b)("p",null,"Usually, these languages generate a ",Object(o.b)("inlineCode",{parentName:"p"},".class")," file after compilation, this ",Object(o.b)("inlineCode",{parentName:"p"},".class")," file usually has the same name as the source file name or\nthe same name as the ",Object(o.b)("inlineCode",{parentName:"p"},"class")," declared inside it. ",Object(o.b)("inlineCode",{parentName:"p"},"cpbooster")," takes advantage of this behavior and therefore, no extra code is written to name\nthe executables (",Object(o.b)("inlineCode",{parentName:"p"},".class")," files), except for ",Object(o.b)("inlineCode",{parentName:"p"},"kotlin")," which adds ",Object(o.b)("inlineCode",{parentName:"p"},"Kt")," to the executable name, we have that case covered with a simple ",Object(o.b)("inlineCode",{parentName:"p"},"if"),"\ncondition here:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'getExecutableFileName(): string {\n  return `${this.getExecutableFileNameNoExtension()}${\n    this.langExtension === LangExtensions.kotlin ? "Kt" : ""\n  }.class`;\n}\n')),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/MixedTester.ts#L36"},"https://github.com/searleser97/cpbooster/blob/33f274c030015bb555824d5ba7a4c1b11776257a/app/src/Test/TesterFactory/MixedTester.ts#L36")),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Currently, to guarantee the correct behavior of ",Object(o.b)("inlineCode",{parentName:"p"},"cpbooster"),", the ",Object(o.b)("inlineCode",{parentName:"p"},"class")," name should match with the source file name, since\nsome languages use the ",Object(o.b)("inlineCode",{parentName:"p"},"class")," name as the executable (",Object(o.b)("inlineCode",{parentName:"p"},".class"),") name instead of the source file name."),Object(o.b)("p",{parentName:"div"},"Which leads to a possible ",Object(o.b)("strong",{parentName:"p"},"contribution"),' related with the "templates" for languages that require the declaration of a class.\nWe can add the concept of ',Object(o.b)("inlineCode",{parentName:"p"},"cpbooster-variables")," which will be formatted strings that will get replaced with some information,\nlike filename or date, etc"),Object(o.b)("p",{parentName:"div"},"e.g."),Object(o.b)("h6",{parentName:"div",id:"templatejava"},Object(o.b)("inlineCode",{parentName:"h6"},"template.java")),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",{parentName:"pre",className:"language-java"},"/**\n * Date Time: $${DateTime}$$\n */\n\nimport java.util.*;\n\npublic class $${FileName}$$   <-- just a suggested syntax not sure if its the best\n{\n\n    public static void main(String[] args)\n    {\n\n    }\n}\n")),Object(o.b)("p",{parentName:"div"},"then if we create a file ",Object(o.b)("inlineCode",{parentName:"p"},"ProblemC.java")," with ",Object(o.b)("inlineCode",{parentName:"p"},"cpbooster")," the file will look like this:"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",{parentName:"pre",className:"language-java"},'/**\n * DateTime: 13-07-2022 13:30      <-- $${DateTime}$$ was replaced with the "current" date time\n */\n\nimport java.util.*;\n\npublic class ProblemC     <-- $${FileName}$$ was replaced with ProblemC\n{\n\n    public static void main(String[] args)\n    {\n\n    }\n}\n')),Object(o.b)("p",{parentName:"div"},"one thing to note here is that we will also need to force the file name to have the first letter capitalized (in uppercase),\nsince some ",Object(o.b)("inlineCode",{parentName:"p"},"mixed")," languages do not allow to create classes that do not have the first letter in uppercase."))))}p.isMDXComponent=!0},117:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(a),d=n,u=b["".concat(c,".").concat(d)]||b[d]||m[d]||o;return a?r.a.createElement(u,i(i({ref:t},s),{},{components:a})):r.a.createElement(u,i({ref:t},s))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,c=new Array(o);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var s=2;s<o;s++)c[s]=a[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);